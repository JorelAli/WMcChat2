{"version":3,"sources":["datatypes/structures.js"],"names":["require","getField","getCount","sendCount","calcCount","tryDoc","module","exports","readArray","writeArray","sizeOfArray","readCount","writeCount","sizeOfCount","readContainer","writeContainer","sizeOfContainer","buffer","offset","typeArgs","rootNode","results","value","size","call","count","i","read","type","push","length","reduce","v","index","write","sizeOf","context","forEach","name","anon","readResults","undefined","Object","keys","key","countFor"],"mappings":"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","file":"../../datatypes/structures.js","sourcesContent":["var { getField, getCount, sendCount, calcCount, tryDoc } = require(\"../utils\");\n\nmodule.exports = {\n  'array': [readArray, writeArray, sizeOfArray, require('../../ProtoDef/schemas/array')],\n  'count': [readCount, writeCount, sizeOfCount, require('../../ProtoDef/schemas/count')],\n  'container': [readContainer, writeContainer, sizeOfContainer, require('../../ProtoDef/schemas/container')]\n};\n\nfunction readArray(buffer, offset, typeArgs, rootNode) {\n  var results = {\n    value: [],\n    size: 0\n  };\n  var value;\n  var { count, size } = getCount.call(this, buffer, offset, typeArgs, rootNode);\n  offset += size;\n  results.size += size;\n  for(var i = 0; i < count; i++) {\n    ({size,value}=tryDoc(() => this.read(buffer, offset, typeArgs.type, rootNode), i));\n    results.size += size;\n    offset += size;\n    results.value.push(value);\n  }\n  return results;\n}\n\nfunction writeArray(value, buffer, offset, typeArgs, rootNode) {\n  offset = sendCount.call(this, value.length, buffer, offset, typeArgs, rootNode);\n  return value.reduce((offset,v,index) =>tryDoc(() => this.write(v, buffer, offset, typeArgs.type, rootNode),index),offset);\n}\n\nfunction sizeOfArray(value, typeArgs, rootNode) {\n  var size = calcCount.call(this, value.length, typeArgs, rootNode);\n  size = value.reduce((size,v,index) =>tryDoc(() => size+this.sizeOf(v, typeArgs.type, rootNode), index),size);\n  return size;\n}\n\n\nfunction readContainer(buffer, offset, typeArgs, context) {\n  var results = {\n    value: { \"..\": context },\n    size: 0\n  };\n  typeArgs.forEach(({type,name,anon}) => {\n    tryDoc(() => {\n      var readResults = this.read(buffer, offset, type, results.value);\n      results.size += readResults.size;\n      offset += readResults.size;\n      if (anon) {\n        if(readResults.value !== undefined) Object.keys(readResults.value).forEach(function(key) {\n          results.value[key] = readResults.value[key];\n        });\n      } else\n        results.value[name] = readResults.value;\n    }, name ? name : \"unknown\");\n  });\n  delete results.value[\"..\"];\n  return results;\n}\n\nfunction writeContainer(value, buffer, offset, typeArgs, context) {\n  value[\"..\"] = context;\n  offset=typeArgs.reduce((offset,{type,name,anon}) =>\n    tryDoc(() => this.write(anon ? value : value[name], buffer, offset, type, value),name ?  name : \"unknown\"),offset);\n  delete value[\"..\"];\n  return offset;\n}\n\nfunction sizeOfContainer(value, typeArgs, context) {\n  value[\"..\"] = context;\n  var size = typeArgs.reduce((size,{type,name,anon}) =>\n    size + tryDoc(() => this.sizeOf(anon ? value : value[name], type, value), name ? name : \"unknown\"),0);\n  delete value[\"..\"];\n  return size;\n}\n\nfunction readCount(buffer, offset, {type}, rootNode) {\n  return this.read(buffer, offset, type, rootNode);\n}\n\nfunction writeCount(value, buffer, offset, {countFor,type}, rootNode) {\n  // Actually gets the required field, and writes its length. Value is unused.\n  // TODO : a bit hackityhack.\n  return this.write(getField(countFor, rootNode).length, buffer, offset, type, rootNode);\n}\n\nfunction sizeOfCount(value, {countFor,type}, rootNode) {\n  // TODO : should I use value or getField().length ?\n  return this.sizeOf(getField(countFor, rootNode).length, type, rootNode);\n}\n"]}