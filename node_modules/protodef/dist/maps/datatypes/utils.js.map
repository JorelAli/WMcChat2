{"version":3,"sources":["datatypes/utils.js"],"names":["assert","require","getField","getCount","sendCount","calcCount","tryDoc","PartialReadError","module","exports","readVarInt","writeVarInt","sizeOfVarInt","readBool","writeBool","readPString","writePString","sizeOfPString","readBuffer","writeBuffer","sizeOfBuffer","readVoid","writeVoid","readBitField","writeBitField","sizeOfBitField","readCString","writeCString","sizeOfCString","readMapper","writeMapper","sizeOfMapper","buffer","offset","rootNode","type","mappings","read","size","value","mappedValue","keys","Object","i","length","Error","write","sizeOf","result","shift","cursor","b","readUInt8","ok","writeUInt8","typeArgs","call","count","strEnd","toString","Buffer","byteLength","readInt8","writeInt8","slice","copy","undefined","generateBitMask","n","beginOffset","curVal","bits","results","reduce","acc","signed","name","currentSize","val","bitsToRead","Math","min","toWrite","forEach","writeBits","ceil"],"mappings":"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","file":"../../datatypes/utils.js","sourcesContent":["var assert = require('assert');\n\nvar { getField, getCount, sendCount, calcCount, tryDoc, PartialReadError } = require(\"../utils\");\n\nmodule.exports = {\n  'varint': [readVarInt, writeVarInt, sizeOfVarInt],\n  'bool': [readBool, writeBool, 1],\n  'pstring': [readPString, writePString, sizeOfPString, require('../../ProtoDef/schemas/pstring')],\n  'buffer': [readBuffer, writeBuffer, sizeOfBuffer, require('../../ProtoDef/schemas/buffer')],\n  'void': [readVoid, writeVoid, 0],\n  'bitfield': [readBitField, writeBitField, sizeOfBitField, require('../../ProtoDef/schemas/bitfield')],\n  'cstring': [readCString, writeCString, sizeOfCString],\n  'mapper':[readMapper,writeMapper,sizeOfMapper, require('../../ProtoDef/schemas/mapper')]\n};\n\nfunction readMapper(buffer,offset,{type,mappings},rootNode)\n{\n  var {size,value}=this.read(buffer, offset, type, rootNode);\n  var mappedValue=null;\n  var keys=Object.keys(mappings);\n  for(var i=0;i<keys.length;i++) {\n    if(keys[i]==value) {\n      mappedValue = mappings[keys[i]];\n      break;\n    }\n  }\n  if(mappedValue==null) throw new Error(value+\" is not in the mappings value\");\n  return {\n    size:size,\n    value:mappedValue\n  };\n}\n\nfunction writeMapper(value,buffer,offset,{type,mappings},rootNode)\n{\n  var keys=Object.keys(mappings);\n  var mappedValue=null;\n  for(var i=0;i<keys.length;i++) {\n    if(mappings[keys[i]]==value) {\n      mappedValue = keys[i];\n      break;\n    }\n  }\n  if(mappedValue==null) throw new Error(value+\" is not in the mappings value\");\n  return this.write(mappedValue,buffer,offset,type,rootNode);\n}\n\nfunction sizeOfMapper(value,{type,mappings},rootNode)\n{\n  var keys=Object.keys(mappings);\n  var mappedValue=null;\n  for(var i=0;i<keys.length;i++) {\n    if(mappings[keys[i]]==value) {\n      mappedValue = keys[i];\n      break;\n    }\n  }\n  if(mappedValue==null) throw new Error(value+\" is not in the mappings value\");\n  return this.sizeOf(mappedValue,type,rootNode);\n}\n\nfunction readVarInt(buffer, offset) {\n  var result = 0;\n  var shift = 0;\n  var cursor = offset;\n\n  while(true) {\n    if(cursor + 1 > buffer.length)\n      throw new PartialReadError();\n    var b = buffer.readUInt8(cursor);\n    result |= ((b & 0x7f) << shift); // Add the bits to our number, except MSB\n    cursor++;\n    if(!(b & 0x80)) { // If the MSB is not set, we return the number\n      return {\n        value: result,\n        size: cursor - offset\n      };\n    }\n    shift += 7; // we only have 7 bits, MSB being the return-trigger\n    assert.ok(shift < 64, \"varint is too big\"); // Make sure our shift don't overflow.\n  }\n}\n\nfunction sizeOfVarInt(value) {\n  var cursor = 0;\n  while(value & ~0x7F) {\n    value >>>= 7;\n    cursor++;\n  }\n  return cursor + 1;\n}\n\nfunction writeVarInt(value, buffer, offset) {\n  var cursor = 0;\n  while(value & ~0x7F) {\n    buffer.writeUInt8((value & 0xFF) | 0x80, offset + cursor);\n    cursor++;\n    value >>>= 7;\n  }\n  buffer.writeUInt8(value, offset + cursor);\n  return offset + cursor + 1;\n}\n\n\nfunction readPString(buffer, offset, typeArgs,rootNode) {\n  var { size, count } = getCount.call(this, buffer, offset, typeArgs, rootNode);\n  var cursor = offset + size;\n  var strEnd = cursor + count;\n  if(strEnd > buffer.length) throw new PartialReadError(\"Missing characters in string, found size is \"+buffer.length+\n    \" expected size was \"+strEnd);\n\n  return {\n    value: buffer.toString('utf8', cursor, strEnd),\n    size: strEnd - offset\n  };\n}\n\nfunction writePString(value, buffer, offset, typeArgs,rootNode) {\n  var length = Buffer.byteLength(value, 'utf8');\n  offset = sendCount.call(this, length, buffer, offset, typeArgs, rootNode);\n  buffer.write(value, offset, length, 'utf8');\n  return offset + length;\n}\n\n\nfunction sizeOfPString(value, typeArgs,rootNode) {\n  var length = Buffer.byteLength(value, 'utf8');\n  var size = calcCount.call(this, length, typeArgs, rootNode);\n  return size + length;\n}\n\nfunction readBool(buffer, offset) {\n  if(offset + 1 > buffer.length) throw new PartialReadError();\n  var value = buffer.readInt8(offset);\n  return {\n    value: !!value,\n    size: 1\n  };\n}\n\nfunction writeBool(value, buffer, offset) {\n  buffer.writeInt8(+value, offset);\n  return offset + 1;\n}\n\n\nfunction readBuffer(buffer, offset, typeArgs, rootNode) {\n  var { size, count } = getCount.call(this, buffer, offset, typeArgs, rootNode);\n  offset += size;\n  if(offset+count > buffer.length) throw new PartialReadError();\n  return {\n    value: buffer.slice(offset, offset + count),\n    size: size + count\n  };\n}\n\nfunction writeBuffer(value, buffer, offset, typeArgs, rootNode) {\n  offset = sendCount.call(this, value.length, buffer, offset, typeArgs, rootNode);\n  value.copy(buffer, offset);\n  return offset + value.length;\n}\n\nfunction sizeOfBuffer(value, typeArgs, rootNode) {\n  var size = calcCount.call(this, value.length, typeArgs, rootNode);\n  return size + value.length;\n}\n\nfunction readVoid() {\n  return {\n    value: undefined,\n    size: 0\n  };\n}\n\nfunction writeVoid(value, buffer, offset) {\n  return offset;\n}\n\nfunction generateBitMask(n) {\n  return (1 << n) - 1;\n}\n\nfunction readBitField(buffer, offset, typeArgs) {\n  var beginOffset = offset;\n  var curVal = null;\n  var bits = 0;\n  var results = {};\n  results.value = typeArgs.reduce(function(acc, {size,signed,name}) {\n    var currentSize = size;\n    var val = 0;\n    while (currentSize > 0) {\n      if (bits == 0) {\n        if(buffer.length<offset+1)\n          throw new PartialReadError();\n        curVal = buffer[offset++];\n        bits = 8;\n      }\n      var bitsToRead = Math.min(currentSize, bits);\n      val = (val << bitsToRead) | (curVal & generateBitMask(bits)) >> (bits - bitsToRead);\n      bits -= bitsToRead;\n      currentSize -= bitsToRead;\n    }\n    if (signed && val >= 1 << (size - 1))\n      val -= 1 << size;\n    acc[name] = val;\n    return acc;\n  }, {});\n  results.size = offset - beginOffset;\n  return results;\n}\nfunction writeBitField(value, buffer, offset, typeArgs) {\n  var toWrite = 0;\n  var bits = 0;\n  typeArgs.forEach(function({size,signed,name}) {\n    var val = value[name];\n    if ((!signed && val < 0) || (signed && val < -(1 << (size - 1))))\n      throw new Error(value + \" < \" + signed ? (-(1 << (size - 1))) : 0);\n    else if ((!signed && val >= 1 << size)\n        || (signed && val >= (1 << (size - 1)) - 1))\n      throw new Error(value + \" >= \" + signed ? (1 << size) : ((1 << (size - 1)) - 1));\n    while (size > 0) {\n      var writeBits = Math.min(8 - bits, size);\n      toWrite = toWrite << writeBits |\n        ((val >> (size - writeBits)) & generateBitMask(writeBits));\n      size -= writeBits;\n      bits += writeBits;\n      if (bits === 8) {\n        buffer[offset++] = toWrite;\n        bits = 0;\n        toWrite = 0;\n      }\n    }\n  });\n  if (bits != 0)\n    buffer[offset++] = toWrite << (8 - bits);\n  return offset;\n}\n\nfunction sizeOfBitField(value, typeArgs) {\n  return Math.ceil(typeArgs.reduce(function(acc, {size}) {\n    return acc + size;\n  }, 0) / 8);\n}\n\nfunction readCString(buffer, offset) {\n  var size=0;\n  while (offset+size < buffer.length && buffer[offset+size] != 0x00)\n    size++;\n  if (buffer.length<offset+size+1)\n    throw new PartialReadError();\n\n  return {\n    value:buffer.toString('utf8', offset, offset+size),\n    size:size+1\n  };\n}\n\nfunction writeCString(value, buffer, offset) {\n  var length = Buffer.byteLength(value, 'utf8');\n  buffer.write(value, offset,length,'utf8');\n  offset += length;\n  buffer.writeInt8(0x00, offset);\n  return offset + 1;\n}\n\nfunction sizeOfCString(value) {\n  var length = Buffer.byteLength(value, 'utf8');\n  return length + 1;\n}\n"]}