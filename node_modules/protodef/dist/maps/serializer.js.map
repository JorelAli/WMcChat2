{"version":3,"sources":["serializer.js"],"names":["Transform","require","PartialReadError","Serializer","proto","mainType","writableObjectMode","queue","Buffer","packet","createPacketBuffer","chunk","enc","cb","buf","e","push","Parser","readableObjectMode","buffer","parsePacketBuffer","concat","partialReadError","slice","metadata","size","module","exports"],"mappings":";;;;;;;;;;AAAA,IAAIA,YAAYC,QAAQ,iBAAR,EAA2BD,SAA3C;;eAC0BC,QAAQ,SAAR,C;IAApBC,gB,YAAAA,gB;;IAEAC,U;;;AACJ,sBAAYC,KAAZ,EAAkBC,QAAlB,EAA4B;AAAA;;AAAA,wHACpB,EAAEC,oBAAoB,IAAtB,EADoB;;AAE1B,UAAKF,KAAL,GAAWA,KAAX;AACA,UAAKC,QAAL,GAAcA,QAAd;AACA,UAAKE,KAAL,GAAW,IAAIC,MAAJ,CAAW,CAAX,CAAX;AAJ0B;AAK3B;;;;uCAEkBC,M,EAAQ;AACzB,aAAO,KAAKL,KAAL,CAAWM,kBAAX,CAA8B,KAAKL,QAAnC,EAA4CI,MAA5C,CAAP;AACD;;;+BAEUE,K,EAAOC,G,EAAKC,E,EAAI;AACzB,UAAIC,YAAJ;AACA,UAAI;AACFA,cAAM,KAAKJ,kBAAL,CAAwBC,KAAxB,CAAN;AACD,OAFD,CAEE,OAAOI,CAAP,EAAU;AACV,eAAOF,GAAGE,CAAH,CAAP;AACD;AACD,WAAKC,IAAL,CAAUF,GAAV;AACA,aAAOD,IAAP;AACD;;;;EArBsBb,S;;IAwBnBiB,M;;;AACJ,kBAAYb,KAAZ,EAAkBC,QAAlB,EAA4B;AAAA;;AAAA,iHACpB,EAAEa,oBAAoB,IAAtB,EADoB;;AAE1B,WAAKd,KAAL,GAAWA,KAAX;AACA,WAAKC,QAAL,GAAcA,QAAd;AACA,WAAKE,KAAL,GAAW,IAAIC,MAAJ,CAAW,CAAX,CAAX;AAJ0B;AAK3B;;;;sCAEiBW,M,EAAQ;AACxB,aAAO,KAAKf,KAAL,CAAWgB,iBAAX,CAA6B,KAAKf,QAAlC,EAA2Cc,MAA3C,CAAP;AACD;;;+BAEUR,K,EAAOC,G,EAAKC,E,EAAI;AACzB,WAAKN,KAAL,GAAaC,OAAOa,MAAP,CAAc,CAAC,KAAKd,KAAN,EAAaI,KAAb,CAAd,CAAb;AACA,aAAM,IAAN,EAAY;AACV,YAAIF,eAAJ;AACA,YAAI;AACFA,mBAAS,KAAKW,iBAAL,CAAuB,KAAKb,KAA5B,CAAT;AACD,SAFD,CAGA,OAAOQ,CAAP,EAAU;AACR,cAAIA,EAAEO,gBAAN,EACE,OAAOT,IAAP,CADF,KAEK;AACHE,cAAEI,MAAF,GAAS,KAAKZ,KAAd;AACA,iBAAKA,KAAL,GAAW,IAAIC,MAAJ,CAAW,CAAX,CAAX;AACA,mBAAOK,GAAGE,CAAH,CAAP;AACD;AACF;;AAED,aAAKC,IAAL,CAAUP,MAAV;AACA,aAAKF,KAAL,GAAW,KAAKA,KAAL,CAAWgB,KAAX,CAAiBd,OAAOe,QAAP,CAAgBC,IAAjC,CAAX;AACD;AACF;;;;EAhCkBzB,S;;AAmCrB0B,OAAOC,OAAP,GAAe;AACbxB,cAAWA,UADE;AAEbc,UAAOA;AAFM,CAAf","file":"../serializer.js","sourcesContent":["var Transform = require(\"readable-stream\").Transform;\nvar { PartialReadError} = require('./utils');\n\nclass Serializer extends Transform {\n  constructor(proto,mainType) {\n    super({ writableObjectMode: true });\n    this.proto=proto;\n    this.mainType=mainType;\n    this.queue=new Buffer(0);\n  }\n\n  createPacketBuffer(packet) {\n    return this.proto.createPacketBuffer(this.mainType,packet);\n  }\n\n  _transform(chunk, enc, cb) {\n    let buf;\n    try {\n      buf = this.createPacketBuffer(chunk);\n    } catch (e) {\n      return cb(e);\n    }\n    this.push(buf);\n    return cb();\n  }\n}\n\nclass Parser extends Transform {\n  constructor(proto,mainType) {\n    super({ readableObjectMode: true });\n    this.proto=proto;\n    this.mainType=mainType;\n    this.queue=new Buffer(0);\n  }\n\n  parsePacketBuffer(buffer) {\n    return this.proto.parsePacketBuffer(this.mainType,buffer);\n  }\n\n  _transform(chunk, enc, cb) {\n    this.queue = Buffer.concat([this.queue, chunk]);\n    while(true) {\n      let packet;\n      try {\n        packet = this.parsePacketBuffer(this.queue);\n      }\n      catch (e) {\n        if (e.partialReadError)\n          return cb();\n        else {\n          e.buffer=this.queue;\n          this.queue=new Buffer(0);\n          return cb(e);\n        }\n      }\n\n      this.push(packet);\n      this.queue=this.queue.slice(packet.metadata.size);\n    }\n  }\n}\n\nmodule.exports={\n  Serializer:Serializer,\n  Parser:Parser\n};"]}