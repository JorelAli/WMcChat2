{"version":3,"sources":["utils.js"],"names":["getField","countField","context","countFieldArr","split","i","hasOwnProperty","length","getFieldInfo","fieldInfo","type","Array","isArray","typeArgs","Error","getCount","buffer","offset","rootNode","count","countType","c","size","tryDoc","read","value","sendCount","len","write","calcCount","sizeOf","addErrorField","e","field","tryCatch","tryfn","catchfn","ExtendableError","message","name","constructor","captureStackTrace","PartialReadError","partialReadError","module","exports"],"mappings":"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","file":"../utils.js","sourcesContent":["\nfunction getField(countField, context) {\n  var countFieldArr = countField.split(\"/\");\n  var i = 0;\n  if (countFieldArr[i] === \"\") {\n    while (context.hasOwnProperty(\"..\"))\n      context = context[\"..\"];\n    i++;\n  }\n  for(; i < countFieldArr.length; i++)\n    context = context[countFieldArr[i]];\n  return context;\n}\n\nfunction getFieldInfo(fieldInfo) {\n  if (typeof fieldInfo === \"string\")\n    return { type: fieldInfo };\n  else if (Array.isArray(fieldInfo))\n    return { type: fieldInfo[0], typeArgs: fieldInfo[1] };\n  else if (typeof fieldInfo.type === \"string\")\n    return fieldInfo;\n  else\n    throw new Error(\"Not a fieldinfo\");\n}\n\nfunction getCount(buffer, offset, { count, countType }, rootNode) {\n  var c = 0;\n  var size = 0;\n  if(typeof count === \"number\")\n    c = count;\n  else if (typeof count !== \"undefined\") {\n    c = getField(count, rootNode);\n  } else if (typeof countType !== \"undefined\") {\n    ({size,value: c}=tryDoc(() => this.read(buffer, offset, getFieldInfo(countType), rootNode),\"$count\"));\n  } else // TODO : broken schema, should probably error out.\n    c = 0;\n  return { count: c, size };\n}\n\nfunction sendCount(len, buffer, offset, { count, countType }, rootNode) {\n  if (typeof count !== \"undefined\" && len !== count) {\n    // TODO: Throw\n  } else if (typeof countType !== \"undefined\") {\n    offset = this.write(len, buffer, offset, getFieldInfo(countType), rootNode);\n  } else {\n    // TODO: Throw\n  }\n  return offset;\n}\n\nfunction calcCount(len, { count, countType }, rootNode) {\n  if (typeof count === \"undefined\" && typeof countType !== \"undefined\")\n    return tryDoc(() => this.sizeOf(len, getFieldInfo(countType), rootNode),\"$count\");\n  else\n    return 0;\n}\n\nfunction addErrorField(e, field) {\n  e.field = e.field ? field + \".\" + e.field : field;\n  throw e;\n}\n\nfunction tryCatch(tryfn, catchfn) {\n  try { return tryfn(); } catch (e) { catchfn(e); }\n}\n\nfunction tryDoc(tryfn,field) {\n  return tryCatch(tryfn,(e) => addErrorField(e,field));\n}\n\nclass ExtendableError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = this.constructor.name;\n    this.message = message;\n    Error.captureStackTrace(this, this.constructor.name)\n  }\n}\n\nclass PartialReadError extends ExtendableError {\n  constructor(message) {\n    super(message);\n    this.partialReadError=true;\n  }\n}\n\nmodule.exports = {\n  getField: getField,\n  getFieldInfo: getFieldInfo,\n  addErrorField: addErrorField,\n  getCount: getCount,\n  sendCount: sendCount,\n  calcCount: calcCount,\n  tryCatch: tryCatch,\n  tryDoc: tryDoc,\n  PartialReadError:PartialReadError\n};\n"]}